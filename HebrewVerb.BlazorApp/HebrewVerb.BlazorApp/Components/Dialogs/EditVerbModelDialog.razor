@using HebrewVerb.Application.Feature.VerbModels.Commands
@using HebrewVerb.Application.Feature.VerbModels.Queries
@using HebrewVerb.Application.Models
@using HebrewVerb.Application.Models.Validators
@inject IMediator _mediator
@inject ISnackbar _snackbar


<MudDialog Style="min-width:50vw">
    <DialogContent>
        <MudForm @ref=_form Model="VerbModelModel" Validation="@(Validator.ValidateValue)">
            <MudTextField T="string" @bind-Value=VerbModelModel.Name For="@(() => VerbModelModel.Name)" Label="Название"></MudTextField>
            <MudTextField T="string" @bind-Value=VerbModelModel.Description Label="Краткое описание"></MudTextField>
            <BinyanFilter Options="VerbModelBinyans" OptionsChanged="OnBinyansChanged"></BinyanFilter>
        </MudForm>
    </DialogContent>
    <DialogActions>
            <MudButton Class="me-6" Variant="Variant.Filled" OnClick="Cancel">ОТМЕНА</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">СОХРАНИТЬ</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    [Parameter]
    public int VerbModelId { get; set; }

    [Parameter]
    public bool IsNew { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    private MudForm _form;
    private VerbModelDtoValidator Validator; 

    private VerbModelDto VerbModelModel { get; set; } = new();

    private IEnumerable<Binyan> VerbModelBinyans { get; set; } = [];

    private void OnBinyansChanged(IEnumerable<Binyan> binyans)
    {
        VerbModelBinyans = binyans;
        VerbModelModel.Binyans = binyans.GetBinyanNames();
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            return;
        }

        var res = new Ardalis.Result.Result();
        if (IsNew)
        {
            var addCommand = new AddNewVerbModelCommand(VerbModelModel.Name, VerbModelModel.Description, VerbModelModel.Binyans);
            res = await _mediator.Send(addCommand);
        }
        else
        {
            var updateCommand = new UpdateVerbModelCommand(VerbModelModel);
            res = await _mediator.Send(updateCommand);
        }

        if (res?.IsSuccess == true)
        {
            _snackbar.Add(IsNew ? "VerbModel Successfully Created" : "VerbModel Successfully Updated", Severity.Success);
            MudDialog.Cancel();
            await OnSuccess.InvokeAsync();
        }
        else
        {
            var errorMsg = string.Join(", ", res?.Errors ?? []);
            _snackbar.Add($"Errors: {errorMsg}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!IsNew)
        {
            var query = new GetVerbModelByIdQuery(VerbModelId);
            var res = await _mediator.Send(query);

            if (res == null)
            {
                MudDialog.Cancel();
            }
            else
            {
                VerbModelModel = res;
                VerbModelBinyans = VerbModelModel.Binyans.GetBinyans();
            }
        }
        else
        {
            VerbModelModel = new();
        }

        Validator = new(_mediator);
    }
}
