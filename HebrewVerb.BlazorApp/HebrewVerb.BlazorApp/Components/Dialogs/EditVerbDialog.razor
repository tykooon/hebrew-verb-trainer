@using HebrewVerb.Application.Feature.Verbs
@using HebrewVerb.Application.Feature.Verbs.Commands
@using HebrewVerb.Application.Feature.Verbs.Queries
@using HebrewVerb.Application.Models
@using HebrewVerb.Application.Models.Validators
@using HebrewVerb.Application.Services;
@inject IMediator _mediator
@inject ISnackbar _snackbar
@using HebrewVerb.BlazorApp.Common.Extensions
@using Microsoft.Extensions.Caching.Distributed
@inject IDistributedCache _cache


<MudDialog Style="min-width:50vw">
    <DialogContent>
        <MudText Typo="Typo.h6">Глагол: @VerbDtoModel.Infinitive.Hebrew (@VerbDtoModel.Infinitive.HebrewNikkud) </MudText>
        <MudForm @ref=_form Model="VerbDtoModel" Validation="@(Validator.ValidateValue)">
            <MudTextField T="string" Value=VerbDtoModel.Shoresh Disabled Label="Корень"></MudTextField>
            <BinyanSelect Option="VerbDtoModel.Binyan.ToBinyan()" OptionsChanged="OnBinyanChanged"></BinyanSelect>
            <MudTextField T="string" Value=VerbDtoModel.AllTranslations() Disabled Label="Перевод"></MudTextField>
            <GizraFilter Options="SelectedGizras" OptionsChanged="OnGizraChanged" GizraList="AllowedGizras"></GizraFilter>
            <VerbModelFilter Options="SelectedVerbModels" OptionsChanged="OnVerbModelChanged" VerbModelList="AllowedVerbModels"></VerbModelFilter>
             <VerbTagFilter Options="SelectedVerbTags" OptionsChanged="OnVerbTagChanged"></VerbTagFilter>

        </MudForm>
    </DialogContent>
    <DialogActions>
            <MudButton Class="me-6" Variant="Variant.Filled" OnClick="Cancel">ОТМЕНА</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">СОХРАНИТЬ</MudButton>
    </DialogActions>
</MudDialog>

 @code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    [Parameter]
    public int VerbId { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    private MudForm _form;
    private VerbDtoValidator Validator; 

    private VerbDto VerbDtoModel { get; set; } = new();


    private void OnBinyanChanged(Binyan binyan)
    {
        // Currently Hardcoded NameRussian  -- TODO: depend on Language
        VerbDtoModel.Binyan = binyan.NameRussian;
        RefreshOptions(true);
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            return;
        }

        var command = new UpdateVerbCommand(VerbDtoModel);
        var res = await _mediator.Send(command);

        if (res?.IsSuccess == true)
        {
            _snackbar.Add("Verb Successfully Updated", Severity.Success);
            MudDialog.Cancel();
            await OnSuccess.InvokeAsync();
        }
        else
        {
            var errorMsg = string.Join(", ", res?.Errors ?? []);
            _snackbar.Add($"Errors: {errorMsg}", Severity.Error);
        }
    }

    private IEnumerable<Gizra> AllowedGizras { get; set; } = [];
    private IEnumerable<VerbModel> AllowedVerbModels { get; set; } = [];

    private HashSet<Gizra> SelectedGizras = [];
    private HashSet<VerbModel> SelectedVerbModels = [];
    private HashSet<VerbTag> SelectedVerbTags = [];

    private void OnGizraChanged(IEnumerable<Gizra> gizras)
    {
        SelectedGizras = gizras.ToHashSet();
        VerbDtoModel.Gizras = gizras.ToList();
    }

    private void OnVerbModelChanged(IEnumerable<VerbModel> verbModels)
    {
        SelectedVerbModels = verbModels.ToHashSet();
        VerbDtoModel.VerbModels = verbModels.ToList();
    }

    private void OnVerbTagChanged(IEnumerable<VerbTag> verbTags)
    {
        SelectedVerbTags = verbTags.ToHashSet();
        VerbDtoModel.Tags = verbTags.ToList();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var query = new GetVerbByIdQuery(VerbId);
        var res = await _mediator.Send(query);
        if (res == null)
        {
            MudDialog.Cancel();
        }
        else
        {
            VerbDtoModel = res.Value;
            SelectedGizras = VerbDtoModel.Gizras.ToHashSet();
            SelectedVerbModels = VerbDtoModel.VerbModels.ToHashSet();
            SelectedVerbTags = VerbDtoModel.Tags.ToHashSet();
        }
        RefreshOptions(true);
        Validator = new(_mediator);
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

    }

    public void RefreshOptions(bool firstRender = false)
    {
        AllowedGizras = Common.FilterOptions.GizraOptions.Where<Gizra>(g => g.Binyans.Contains<Binyan>(VerbDtoModel.Binyan.ToBinyan()));
        AllowedVerbModels = Common.FilterOptions.VerbModelOptions.Where<VerbModel>(vm => vm.Binyans.Contains<Binyan>(VerbDtoModel.Binyan.ToBinyan()));

        SelectedGizras = SelectedGizras.Intersect(AllowedGizras).ToHashSet();
        VerbDtoModel.Gizras = SelectedGizras.ToList();

        SelectedVerbModels = SelectedVerbModels.Intersect(AllowedVerbModels).ToHashSet();
        VerbDtoModel.VerbModels = SelectedVerbModels.ToList();

        if (!firstRender)
        {
            StateHasChanged();
        }
    }
}
