@page "/verbsets"
@using HebrewVerb.Application.Feature.VerbCards.Queries
@using HebrewVerb.Application.Models
@using HebrewVerb.BlazorApp.ViewModels
@inject IMediator _mediator
@inject ISnackbar _snackbar



@attribute [StreamRendering]

<PageTitle>Selected Verbs Training</PageTitle>

<FilterBar @ref=_filterBar @bind-CurrentFilter="Filter"></FilterBar>

@if (_isTrainingActive)
{
    <CardsCarousel @ref=_carousel Cards="Cards" @bind-ActiveItem="_activeItem" OnCardSwitch="HideFilter" />
}

<div class="d-flex justify-content-between m-1">
    <div class="border-2 rounded-3 border-dark shadow flex-grow-1 mx-2 p-1">
        <VerbSetPanel @ref=_verbChips VerbSet=@VerbSet CanClose=@(!_isTrainingActive) OnVerbDeleted="DeleteVerb"></VerbSetPanel>
    </div>
    <div class="d-flex flex-column justify-content-center mx-2 p-1">
        @if (!_isTrainingActive)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Start">НАЧАТЬ</MudButton>
            <span class="mx-auto">Выбрано: @VerbSet?.Count</span>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Reselect">ИЗМЕНИТЬ НАБОР</MudButton>
            <span class="mx-auto">Выбрано: @VerbSet?.Count</span>
        }
    </div>
    
</div>

@if (!_isTrainingActive)
{
    <VerbTableUserSelect @ref=_verbTable @bind-SelectedVerbs="VerbSet"></VerbTableUserSelect>
}



@code {
    private List<CardViewModel> Cards = new();

    private int _activeItem;

    private FilterViewModel Filter = new();

    private HashSet<VerbInfo> VerbSet= new();

    private VerbSetPanel _verbChips;

    private VerbTableUserSelect _verbTable;

    private CardsCarousel _carousel;

    private FilterBar _filterBar;

    private TrainingSet _trainingSet = new();

    private bool _isTrainingActive;

    private async Task DeleteVerb(VerbInfo verb)
    {
        VerbSet.Remove(verb);
        await _verbTable.EditSelectedVerbs(verb, false);
        StateHasChanged();
    }

    private async Task Start()
    {
        _verbChips.Refresh();
        _isTrainingActive = true;
        await CardsDataLoad();
        HideFilter();
        StateHasChanged();

    }

    private void Reselect()
    {
        _verbChips.Refresh();
        _isTrainingActive = false;
        StateHasChanged();
    }


    private void HideFilter() => _filterBar?._filterPanel?.Collapse();

    private async Task CardsDataLoad()
    {
        var query = new GetTrainingSetByVerbIdsQuery(VerbSet.Select(v => v.VerbId), Filter.ToFilter());
        var res = await _mediator.Send(query);
        if (res != null)
        {
            _trainingSet = res;
        }
        if (_trainingSet.Verbs.Count == 0)
        {
            _snackbar.Add("В базе нет глаголов, удовлетсворяющих условиям фильтра. Попробуйте задать другие условия поиска", Severity.Warning);
        }
        MakeCards();
    }

    private void MakeCards()
    {
        Cards = [];
        foreach (var item in _trainingSet.FormCards)
        {
            var verb = _trainingSet.Verbs[item.VerbId];
            var card = new CardViewModel(item, verb);
            Cards.Add(card);
        }
    }
}
