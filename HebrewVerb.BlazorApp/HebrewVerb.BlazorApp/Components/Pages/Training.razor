@page "/training"

@using HebrewVerb.BlazorApp.ViewModels
@using HebrewVerb.Application.Models
@inject IMediator _mediator
@rendermode InteractiveAuto


<PageTitle>Training</PageTitle>

<FilterBar @ref=_filterBar @bind-CurrentFilter="FilterData"/>


<MudContainer MaxWidth="MaxWidth.Medium" Class="justify-content-center">

    @if(!_trainingStarted)
    {
        <div class="container d-grid justify-content-center">
                <MudText Typo=@Typo.h6>
                    Если настройки фильтра выбраны - можем приступать к тренировке!
                </MudText>
            <div class="row justify-content-center">
                <div class="col-3">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="pa-5" OnClick="StartTraining">
                        <MudText Typo="Typo.h5"> НАЧНЁМ </MudText>
                    </MudButton>
                </div>
            </div>
        </div>
    }
    else
    {
        <VerbCardCarousel FilterViewModel ="FilterData" OnRestart="RestartTraining" HideFilter="HideFilter" />
    }
</MudContainer>

@code {
    private FilterViewModel FilterData = new();

    private FilterBar? _filterBar;

    private bool _trainingStarted = false;

    private void StartTraining()
    {
        _trainingStarted = true;
        HideFilter();
        StateHasChanged();
    }

    private void HideFilter()
    {
        if (_filterBar?._filterPanel?.IsExpanded ?? false)
        {
            _filterBar._filterPanel.Collapse();
        }
    } 
    

    private void RestartTraining()
    {
        // TODO: Implement restart
    }
}
