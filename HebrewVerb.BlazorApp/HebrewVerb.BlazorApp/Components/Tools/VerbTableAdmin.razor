@using HebrewVerb.Application.Models
@using HebrewVerb.Application.Feature.Verbs.Queries
@using HebrewVerb.BlazorApp.Common.Extensions
@inject IMediator mediator
@inject IDialogService DialogService

<MudTable ServerData="@(new Func<TableState, Task<TableData<VerbInfo>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" Class="verb-table">
    <ToolBarContent>
        <MudText Class="me-4" Typo="Typo.h6">Глаголы</MudText>
        <MudButton Variant="Variant.Filled" Class="mx-3" Color="Color.Secondary" OnClick="AddNewVerb">
            <TextHider Outtro="Добавить"> <MudIcon Icon="@Icons.Material.Filled.Add" /></TextHider>
        </MudButton>
        <AddVerbPopover @bind-IsOpen=@_addVerbIsOpen></AddVerbPopover>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="VerbInfo">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="inf_field" T="VerbInfo">Инфинитив</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="bin_field" T="VerbInfo">Биньян</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="tran_field" T="VerbInfo">Гизра</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="giz_field" T="VerbInfo">Модель</MudTableSortLabel></MudTh>
        <MudTh>Тэги</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="max-width:60px; text-align:center" DataLabel="Id">@context.VerbId</MudTd>
        <MudTd Style="max-width:100px" DataLabel="Infunitive">
            <MudTooltip Text="@context.AllTranslations()">
                @context.Infinitive
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Binyan">@context.Binyan.ToString(Language.Russian)</MudTd>
        <MudTd DataLabel="Gizras">@context.Gizras.ToFormattedString(Language.Hebrew)</MudTd>
        <MudTd DataLabel="VerbModels">@context.VerbModels.ToFormattedString(Language.Hebrew)</MudTd>
        <MudTd DataLabel="Tags"><TagsBar TagList="@context.Tags"></TagsBar> </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Size=Size.Small Color="Color.Primary" Icon="@Icons.Material.Filled.Edit"
                       OnClick=@(()=> EditVerb(context.VerbId)) />
            <MudIconButton Size=Size.Small Color="Color.Error" Icon="@Icons.Material.Filled.Delete"
                       OnClick=@(()=> DeleteVerb(context.VerbId, context.Infinitive)) />
        </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private IEnumerable<VerbInfo> pagedData = [];
    private MudTable<VerbInfo> table;

    private bool _addVerbIsOpen;

    private int totalItems;
    private string searchString = "";

    private void EditVerb(int verbId)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<EditVerbDialog>();
        parameters.Add("VerbId", verbId);
        parameters.Add("OnSuccess", new EventCallbackFactory().Create(this, table.ReloadServerData));
        DialogService.Show<EditVerbDialog>("Изменить", parameters, closeOnEscapeKey);
    }

    private void DeleteVerb(int verbId, string infinitive)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<DeleteVerbDialog>();
        parameters.Add("VerbId", verbId);
        parameters.Add("Infinitive", infinitive);
        parameters.Add("OnSuccess", new EventCallbackFactory().Create(this, table.ReloadServerData));
        DialogService.Show<DeleteVerbDialog>("Удалить", parameters, closeOnEscapeKey);
    }

    public void AddNewVerb()
    {
        _addVerbIsOpen = !_addVerbIsOpen;
    }


    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<VerbInfo>> ServerReload(TableState state)
    {
        var query = new GetVerbInfosByFilterQuery(Filter.Empty);
        IEnumerable<VerbInfo> data = await mediator.Send(query);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Infinitive.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.VerbId);
                break;
            case "inf_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Infinitive);
                break;
            case "bin_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Binyan);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<VerbInfo>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}

