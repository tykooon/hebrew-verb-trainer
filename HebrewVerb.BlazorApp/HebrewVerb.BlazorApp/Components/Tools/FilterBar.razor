@using HebrewVerb.Application.Models
@using HebrewVerb.Application.Services
@using HebrewVerb.BlazorApp.Services
@using HebrewVerb.BlazorApp.ViewModels
@using Microsoft.Extensions.Caching.Distributed
@inject IDistributedCache _cache
@inject IMediator _mediator
@inject ILogger<FilterBar> _logger

@rendermode InteractiveAuto

<MudExpansionPanels Class="mb-5">
    <MudExpansionPanel Class="mt-0 pt-0 bg-light" Text=@filterSummary MaxHeight="600" IsInitiallyExpanded="true" IsExpandedChanged="ExpandedChanged">
        <MudGrid>
            <MudItem xs="10" sm="5">
                <BinyanFilter @bind-Options=@Binyans BinyanList="BinyanList"></BinyanFilter>
            </MudItem>
            <MudItem xs="10" sm="5">
                <GizraFilter @bind-Options="Gizras" GizraList="GizraList"></GizraFilter>
            </MudItem>
            <MudItem xs="2" sm="2">
                <MudSelect T="int" Label="Количество" Value="5">
                    <MudSelectItem Value="1" />
                    <MudSelectItem Value="3" />
                    <MudSelectItem Value="5" />
                    <MudSelectItem Value="10" />
                </MudSelect>
            </MudItem>
            <MudItem xs="10" sm="5">
                <VerbModelFilter @bind-Options="VerbModels" VerbModelList="VerbModelList"></VerbModelFilter>
            </MudItem>

            @if (ShowSearchPanel)
            {
                <MudItem xs="10" sm="5">
                    <MudTextField Value="SearchString" Label="Search" Variant="Variant.Outlined"
                    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                    ValueChanged="SearchStringChanged" OnAdornmentClick="SearchRequested"/>
                </MudItem>
            }
            else
            {
                <MudItem xs="10" sm="5">
                    <ZmanFilter @bind-Options="Zmans" ZmanList="ZmanList"></ZmanFilter>
                </MudItem>
            }

            <MudItem xs="2" sm="2">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth>
                    <MudIcon Icon="@Icons.Material.Filled.Save" Title="Save Filter"></MudIcon>
                    <MudText Class="mobile-hide">СОХРАНИТЬ</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public FilterViewModel CurrentFilter { get; set; } = new();

    [Parameter]
    public EventCallback<FilterViewModel> CurrentFilterChanged { get; set; }

    [Parameter]
    public bool ShowSearchPanel { get; set; } = false;

    [Parameter]
    public string SearchString { get; set; } = "";

    [Parameter]
    public EventCallback<string> SearchStringChanged { get; set; }

    [Parameter]
    public EventCallback SearchRequested { get; set; }

    private string filterSummary => string.Format("Filter: биньяны: {0} гизры: {1} модели: {2} времена: {3}",
        CurrentFilter.Binyans.Count(), CurrentFilter.Gizras.Count(), CurrentFilter.VerbModels.Count(), CurrentFilter.Zmans.Count());

    private IEnumerable<BinyanDto> Binyans { get; set; } = [ ];
    private IEnumerable<ZmanDto> Zmans { get; set; } = [];
    private IEnumerable<GizraDto> Gizras { get; set; } = [];
    private IEnumerable<VerbModelDto> VerbModels { get; set; } = [];





    private void OnFilterChanged((string Type, object? ValueList) args)
    {
        switch (args.Item1)
        {
            case "Zman":
                CurrentFilter.Zmans = (args.ValueList as IEnumerable<ZmanDto>) ?? [];
                break;
            case "Binyan":
                CurrentFilter.Binyans = (args.ValueList as IEnumerable<BinyanDto>) ?? [];
                break;
            case "Gizra":
                CurrentFilter.Gizras = (args.ValueList as IEnumerable<GizraDto>) ?? [];
                break;
            case "VerbModel":
                CurrentFilter.VerbModels = (args.ValueList as IEnumerable<VerbModelDto>) ?? [];
                break;
            default:
                break;
        }
    }
}
