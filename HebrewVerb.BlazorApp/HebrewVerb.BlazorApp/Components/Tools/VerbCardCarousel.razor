@using HebrewVerb.Application.Entities
@using HebrewVerb.Application.Feature.VerbCards.Queries
@using Application.Common.Mappers;
@using HebrewVerb.Application.Models
@inject IMediator _mediator
@inject ISnackbar _snackbar

<CardsCarousel Cards="Cards" OnCardSwitch="HideFilter" @bind-ActiveItem=_activeCard></CardsCarousel>

@code{
    [Parameter]
    public Filter TrainingFilter { get; set; } = new();

    [Parameter]
    public EventCallback HideFilter { get; set; }

    private List<CardViewModel> Cards = [];

    private int _activeCard;
    
    private bool _shouldReloadData = false;

    public void ForceDataReload()
    {
        _activeCard = 0;
        _shouldReloadData = true;
    }

    private TrainingSet _trainingSet = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CardsDataLoad();
    }

    private async Task CardsDataLoad()
    {
        var query = new GetTrainingSetByFilterQuery(TrainingFilter);
        var res = await _mediator.Send(query);
        if (res != null)
        {
            _trainingSet = res;
        }
        if (_trainingSet.Verbs.Count == 0)
        {
            _snackbar.Add("В базе нет глаголов, удовлетсворяющих условиям фильтра. Попробуйте задать другие условия поиска", Severity.Warning);
        }
        MakeCards();
    }

    private void MakeCards()
    {
        Cards = [];
        foreach (var item in _trainingSet.FormCards)
        {
            var verb = _trainingSet.Verbs[item.VerbId];
            var card = new CardViewModel(item, verb);
            Cards.Add(card);
        }
    }

    protected override async Task OnParametersSetAsync(){
        if (_shouldReloadData)
        {
            await CardsDataLoad();
            _shouldReloadData = false;
        }
    }
}