// <auto-generated />
using System;
using HebrewVerb.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HebrewVerb.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231222180702_Version2")]
    partial class Version2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("HebrewVerb.Application.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HebrewVerb.Application.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HebrewVerb.Core.Shoresh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Shoreshes");
                });

            modelBuilder.Entity("HebrewVerb.Core.Verb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Binyan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fut1P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut1PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut1S")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut1ST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2FS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2FST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2MS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2MST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut2PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3FS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3FST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3MS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3MST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fut3PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2FS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2FST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2MS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2MST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Inf")
                        .HasColumnType("TEXT");

                    b.Property<string>("InfT")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchaic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLiterary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSlang")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pas1P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas1PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas1S")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas1ST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2FP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2FPT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2FS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2FST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2MP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2MPT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2MS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas2MST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3FS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3FST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3MS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3MST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3P")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pas3PT")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreFP")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreFPT")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreFS")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreFST")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreMPT")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreMS")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreMST")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShoreshId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Translate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseFrequency")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShoreshId");

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("HebrewVerb.Core.VerbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGizra")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VerbModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShoreshVerbModel", b =>
                {
                    b.Property<int>("ShoreshesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerbModelsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShoreshesId", "VerbModelsId");

                    b.HasIndex("VerbModelsId");

                    b.ToTable("ShoreshVerbModel");
                });

            modelBuilder.Entity("HebrewVerb.Core.Verb", b =>
                {
                    b.HasOne("HebrewVerb.Core.Shoresh", "Shoresh")
                        .WithMany()
                        .HasForeignKey("ShoreshId");

                    b.Navigation("Shoresh");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Application.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoreshVerbModel", b =>
                {
                    b.HasOne("HebrewVerb.Core.Shoresh", null)
                        .WithMany()
                        .HasForeignKey("ShoreshesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Core.VerbModel", null)
                        .WithMany()
                        .HasForeignKey("VerbModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
