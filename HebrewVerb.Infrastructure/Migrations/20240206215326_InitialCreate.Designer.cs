// <auto-generated />
using System;
using HebrewVerb.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HebrewVerb.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240206215326_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GizraShoresh", b =>
                {
                    b.Property<int>("GizrasId")
                        .HasColumnType("int");

                    b.Property<int>("ShoreshesId")
                        .HasColumnType("int");

                    b.HasKey("GizrasId", "ShoreshesId");

                    b.HasIndex("ShoreshesId");

                    b.ToTable("GizraShoresh");
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.AppUserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("AppUserSettings");
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.FilterSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("FilterJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilterName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("FilterSnapshots");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Future", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FS2Id")
                        .HasColumnType("int");

                    b.Property<int>("MP1Id")
                        .HasColumnType("int");

                    b.Property<int>("MP2Id")
                        .HasColumnType("int");

                    b.Property<int>("MP3Id")
                        .HasColumnType("int");

                    b.Property<int>("MS1Id")
                        .HasColumnType("int");

                    b.Property<int>("MS2Id")
                        .HasColumnType("int");

                    b.Property<int>("MS3Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FS2Id");

                    b.HasIndex("MP1Id");

                    b.HasIndex("MP2Id");

                    b.HasIndex("MP3Id");

                    b.HasIndex("MS1Id");

                    b.HasIndex("MS2Id");

                    b.HasIndex("MS3Id");

                    b.ToTable("Futures");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Gizra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Gizras");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Imperative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FSId")
                        .HasColumnType("int");

                    b.Property<int?>("MPId")
                        .HasColumnType("int");

                    b.Property<int?>("MSId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FSId");

                    b.HasIndex("MPId");

                    b.HasIndex("MSId");

                    b.ToTable("Imperatives");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Past", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FP2Id")
                        .HasColumnType("int");

                    b.Property<int>("FS2Id")
                        .HasColumnType("int");

                    b.Property<int>("FS3Id")
                        .HasColumnType("int");

                    b.Property<int>("MP1Id")
                        .HasColumnType("int");

                    b.Property<int>("MP2Id")
                        .HasColumnType("int");

                    b.Property<int>("MP3Id")
                        .HasColumnType("int");

                    b.Property<int>("MS1Id")
                        .HasColumnType("int");

                    b.Property<int>("MS2Id")
                        .HasColumnType("int");

                    b.Property<int>("MS3Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FP2Id");

                    b.HasIndex("FS2Id");

                    b.HasIndex("FS3Id");

                    b.HasIndex("MP1Id");

                    b.HasIndex("MP2Id");

                    b.HasIndex("MP3Id");

                    b.HasIndex("MS1Id");

                    b.HasIndex("MS2Id");

                    b.HasIndex("MS3Id");

                    b.ToTable("Pasts");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Preposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BaseFormId")
                        .HasColumnType("int");

                    b.Property<int>("FP2Id")
                        .HasColumnType("int");

                    b.Property<int>("FP3Id")
                        .HasColumnType("int");

                    b.Property<int>("FS2Id")
                        .HasColumnType("int");

                    b.Property<int>("FS3Id")
                        .HasColumnType("int");

                    b.Property<int>("MP1Id")
                        .HasColumnType("int");

                    b.Property<int>("MP2Id")
                        .HasColumnType("int");

                    b.Property<int>("MP3Id")
                        .HasColumnType("int");

                    b.Property<int>("MS1Id")
                        .HasColumnType("int");

                    b.Property<int>("MS2Id")
                        .HasColumnType("int");

                    b.Property<int>("MS3Id")
                        .HasColumnType("int");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseFormId");

                    b.HasIndex("FP2Id");

                    b.HasIndex("FP3Id");

                    b.HasIndex("FS2Id");

                    b.HasIndex("FS3Id");

                    b.HasIndex("MP1Id");

                    b.HasIndex("MP2Id");

                    b.HasIndex("MP3Id");

                    b.HasIndex("MS1Id");

                    b.HasIndex("MS2Id");

                    b.HasIndex("MS3Id");

                    b.HasIndex("TranslationId");

                    b.ToTable("Prepositions");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Present", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FPId")
                        .HasColumnType("int");

                    b.Property<int>("FSId")
                        .HasColumnType("int");

                    b.Property<int>("MPId")
                        .HasColumnType("int");

                    b.Property<int>("MSId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FPId");

                    b.HasIndex("FSId");

                    b.HasIndex("MPId");

                    b.HasIndex("MSId");

                    b.ToTable("Presents");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Shoresh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Short")
                        .IsUnique();

                    b.ToTable("Shoreshes");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EnglishShort")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Russian")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RussianShort")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Verb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Binyan")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("FutureId")
                        .HasColumnType("int");

                    b.Property<int>("ImperativeId")
                        .HasColumnType("int");

                    b.Property<int>("InfinitiveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchaic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLiterary")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSlang")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PastId")
                        .HasColumnType("int");

                    b.Property<int>("PresentId")
                        .HasColumnType("int");

                    b.Property<int>("ShoreshId")
                        .HasColumnType("int");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<int>("UseFrequency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FutureId");

                    b.HasIndex("ImperativeId");

                    b.HasIndex("InfinitiveId");

                    b.HasIndex("PastId");

                    b.HasIndex("PresentId");

                    b.HasIndex("ShoreshId");

                    b.HasIndex("TranslationId");

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.VerbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VerbModels");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.VerbPreposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PrepositionId")
                        .HasColumnType("int");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<int>("VerbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrepositionId");

                    b.HasIndex("TranslationId");

                    b.HasIndex("VerbId", "PrepositionId")
                        .IsUnique();

                    b.ToTable("VerbPreposition");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.WordForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hebrew")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HebrewNiqqud")
                        .HasColumnType("longtext");

                    b.Property<int>("StressLetterEng")
                        .HasColumnType("int");

                    b.Property<int>("StressLetterRus")
                        .HasColumnType("int");

                    b.Property<string>("TranscriptionEng")
                        .HasColumnType("longtext");

                    b.Property<string>("TranscriptionRus")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WordForms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VerbVerbModel", b =>
                {
                    b.Property<int>("VerbModelsId")
                        .HasColumnType("int");

                    b.Property<int>("VerbsId")
                        .HasColumnType("int");

                    b.HasKey("VerbModelsId", "VerbsId");

                    b.HasIndex("VerbsId");

                    b.ToTable("VerbVerbModel");
                });

            modelBuilder.Entity("GizraShoresh", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.Gizra", null)
                        .WithMany()
                        .HasForeignKey("GizrasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Shoresh", null)
                        .WithMany()
                        .HasForeignKey("ShoreshesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.AppUserSettings", b =>
                {
                    b.HasOne("HebrewVerb.Application.Entities.AppUser", "AppUser")
                        .WithOne("Settings")
                        .HasForeignKey("HebrewVerb.Application.Entities.AppUserSettings", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.FilterSnapshot", b =>
                {
                    b.HasOne("HebrewVerb.Application.Entities.AppUser", "AppUser")
                        .WithMany("FilterSnapshots")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Future", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS2")
                        .WithMany()
                        .HasForeignKey("FS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP1")
                        .WithMany()
                        .HasForeignKey("MP1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP2")
                        .WithMany()
                        .HasForeignKey("MP2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP3")
                        .WithMany()
                        .HasForeignKey("MP3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS1")
                        .WithMany()
                        .HasForeignKey("MS1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS2")
                        .WithMany()
                        .HasForeignKey("MS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS3")
                        .WithMany()
                        .HasForeignKey("MS3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FS2");

                    b.Navigation("MP1");

                    b.Navigation("MP2");

                    b.Navigation("MP3");

                    b.Navigation("MS1");

                    b.Navigation("MS2");

                    b.Navigation("MS3");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Imperative", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS")
                        .WithMany()
                        .HasForeignKey("FSId");

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP")
                        .WithMany()
                        .HasForeignKey("MPId");

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS")
                        .WithMany()
                        .HasForeignKey("MSId");

                    b.Navigation("FS");

                    b.Navigation("MP");

                    b.Navigation("MS");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Past", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FP2")
                        .WithMany()
                        .HasForeignKey("FP2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS2")
                        .WithMany()
                        .HasForeignKey("FS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS3")
                        .WithMany()
                        .HasForeignKey("FS3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP1")
                        .WithMany()
                        .HasForeignKey("MP1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP2")
                        .WithMany()
                        .HasForeignKey("MP2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP3")
                        .WithMany()
                        .HasForeignKey("MP3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS1")
                        .WithMany()
                        .HasForeignKey("MS1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS2")
                        .WithMany()
                        .HasForeignKey("MS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS3")
                        .WithMany()
                        .HasForeignKey("MS3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FP2");

                    b.Navigation("FS2");

                    b.Navigation("FS3");

                    b.Navigation("MP1");

                    b.Navigation("MP2");

                    b.Navigation("MP3");

                    b.Navigation("MS1");

                    b.Navigation("MS2");

                    b.Navigation("MS3");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Preposition", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "BaseForm")
                        .WithMany()
                        .HasForeignKey("BaseFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FP2")
                        .WithMany()
                        .HasForeignKey("FP2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FP3")
                        .WithMany()
                        .HasForeignKey("FP3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS2")
                        .WithMany()
                        .HasForeignKey("FS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS3")
                        .WithMany()
                        .HasForeignKey("FS3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP1")
                        .WithMany()
                        .HasForeignKey("MP1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP2")
                        .WithMany()
                        .HasForeignKey("MP2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP3")
                        .WithMany()
                        .HasForeignKey("MP3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS1")
                        .WithMany()
                        .HasForeignKey("MS1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS2")
                        .WithMany()
                        .HasForeignKey("MS2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS3")
                        .WithMany()
                        .HasForeignKey("MS3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseForm");

                    b.Navigation("FP2");

                    b.Navigation("FP3");

                    b.Navigation("FS2");

                    b.Navigation("FS3");

                    b.Navigation("MP1");

                    b.Navigation("MP2");

                    b.Navigation("MP3");

                    b.Navigation("MS1");

                    b.Navigation("MS2");

                    b.Navigation("MS3");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Present", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FP")
                        .WithMany()
                        .HasForeignKey("FPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "FS")
                        .WithMany()
                        .HasForeignKey("FSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MP")
                        .WithMany()
                        .HasForeignKey("MPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "MS")
                        .WithMany()
                        .HasForeignKey("MSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FP");

                    b.Navigation("FS");

                    b.Navigation("MP");

                    b.Navigation("MS");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Verb", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.Future", "Future")
                        .WithMany()
                        .HasForeignKey("FutureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Imperative", "Imperative")
                        .WithMany()
                        .HasForeignKey("ImperativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.WordForm", "Infinitive")
                        .WithMany()
                        .HasForeignKey("InfinitiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Past", "Past")
                        .WithMany()
                        .HasForeignKey("PastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Present", "Present")
                        .WithMany()
                        .HasForeignKey("PresentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Shoresh", "Shoresh")
                        .WithMany("Verbs")
                        .HasForeignKey("ShoreshId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Future");

                    b.Navigation("Imperative");

                    b.Navigation("Infinitive");

                    b.Navigation("Past");

                    b.Navigation("Present");

                    b.Navigation("Shoresh");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.VerbPreposition", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.Preposition", null)
                        .WithMany()
                        .HasForeignKey("PrepositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Verb", null)
                        .WithMany()
                        .HasForeignKey("VerbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Application.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HebrewVerb.Application.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VerbVerbModel", b =>
                {
                    b.HasOne("HebrewVerb.Domain.Entities.VerbModel", null)
                        .WithMany()
                        .HasForeignKey("VerbModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebrewVerb.Domain.Entities.Verb", null)
                        .WithMany()
                        .HasForeignKey("VerbsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HebrewVerb.Application.Entities.AppUser", b =>
                {
                    b.Navigation("FilterSnapshots");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("HebrewVerb.Domain.Entities.Shoresh", b =>
                {
                    b.Navigation("Verbs");
                });
#pragma warning restore 612, 618
        }
    }
}
